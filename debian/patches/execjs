Description: replace therubyracer with ExecJS
  therubyracer isn't packaged in Debian and it's non-trivial to do so. Replace
  the calls with ExecJS and therefore add an abstraction layer that allows
  Node.js or Spidermonkey to be used instead -- or a bunch of other native Ruby
  backends including therubyracer, in case it's installed in the system.
Author: Faidon Liambotis <faidon@wikimedia.org>
Last-Update: 2013-03-18

--- a/lib/jsduck/esprima.rb
+++ b/lib/jsduck/esprima.rb
@@ -1,10 +1,12 @@
-require 'v8'
+require 'execjs'
 require 'jsduck/util/json'
 require 'jsduck/util/singleton'
 
 module JsDuck
 
-  # Runs Esprima.js through V8.
+  # Runs Esprima.js through execjs (this will select any available
+  # JavaScript runtime - preferably therubyracer on MRI and JScript
+  # on Windows).
   #
   # Initialized as singleton to avoid loading the esprima.js more
   # than once - otherwise performace will severely suffer.
@@ -12,23 +14,22 @@ module JsDuck
     include Util::Singleton
 
     def initialize
-      @v8 = V8::Context.new
-      esprima = File.dirname(File.expand_path(__FILE__))+"/esprima/esprima.js";
+      esprima_path = File.dirname(File.expand_path(__FILE__))+"/esprima/esprima.js";
+      esprima = IO.read(esprima_path)
 
-      # Esprima attempts to assign to window.esprima, but our v8
-      # engine has no global window variable defined.  So define our
-      # own and then grab esprima out from it again.
-      @v8.eval("var window = {};")
-      @v8.load(esprima)
-      @v8.eval("var esprima = window.esprima;")
+      # Esprima attempts to assign to window.esprima, but our engine has no
+      # global window variable defined.  So define our own and then grab
+      # esprima out from it again.
+      esprima = "var window = {};\n\n" + esprima + "var esprima = window.esprima;"
+      helper = "function runEsprima(js) { return JSON.stringify(esprima.parse(js, {comment: true, range: true, raw: true})); }"
+      @context = ExecJS.compile(esprima + "\n\n" + helper)
     end
 
     # Parses JavaScript source code using Esprima.js
     #
     # Returns the resulting AST
     def parse(input)
-      @v8['js'] = input
-      json = @v8.eval("JSON.stringify(esprima.parse(js, {comment: true, range: true, raw: true}))")
+      json = @context.call("runEsprima", input)
       return Util::Json.parse(json, :max_nesting => false)
     end
 
--- a/jsduck.gemspec
+++ b/jsduck.gemspec
@@ -22,7 +22,7 @@ Gem::Specification.new do |s|
   s.add_dependency 'rdiscount'
   s.add_dependency 'json'
   s.add_dependency 'parallel'
-  s.add_dependency 'therubyracer', '>= 0.10.0', '< 0.11.0'
+  s.add_dependency 'execjs'
   s.add_dependency 'dimensions'
 
   s.add_development_dependency 'rspec'
